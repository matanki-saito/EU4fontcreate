# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master,develop ]

jobs:
  build:

    runs-on: windows-2019
    if: "! contains(github.event.head_commit.message, '[ci skip]')"
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Update pip
        run: |
          python -m pip install --upgrade pip
      - name: Install pillow
        run: |
          pip install pillow
      - name: Install fonts
        run: |
          cd 1_tool
          ./Add-Font.ps1 -ExecutionPolicy unrestricted ./fonts/SourceHanSansJP-Regular.otf
          ./Add-Font.ps1 -ExecutionPolicy unrestricted ./fonts/SourceHanSerifJP-Regular.otf
          ./Add-Font.ps1 -ExecutionPolicy unrestricted ./fonts/SourceHanSerifJP-SemiBold.otf
          add-type -AssemblyName system.drawing
          (New-Object System.Drawing.Text.InstalledFontCollection).Families
      - name: make out directory
        run: New-Item font -ItemType Directory
        shell: powershell
      - name: generate map fonts and copy to out directory
        run: |
          cd 3_map_text
          python generate.py
          cd out
          dir
          cd ../
          Copy-Item out/* ../fonts
        shell: powershell
      - name: generate maintext fonts and copy to out directory
        run: |
          cd 2_main_text
          python generate.py
          cd out
          dir
          cd ../
          Copy-Item out/* ../font
        shell: powershell
      - name: make zip
        run: Compress-Archive -Path ./fonts -DestinationPath ./default-font-set.zip
        shell: powershell
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            new font released!
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./default-font-set.zip
          asset_name: default-font-set.zip
          asset_content_type: application/zip

